<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://haruharuharukichi.github.io/so-thin/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Mar 2019 17:16:43 +0900</lastBuildDate>
    
	<atom:link href="https://haruharuharukichi.github.io/so-thin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Slider</title>
      <link>https://haruharuharukichi.github.io/so-thin/components/slider/</link>
      <pubDate>Tue, 19 Mar 2019 17:16:43 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/components/slider/</guid>
      <description>スライドショー オーソドックスタイプ See the Pen sliderBasic by haruharuharukichi (@haruharuharukichi) on CodePen.</description>
    </item>
    
    <item>
      <title>html→WordPress</title>
      <link>https://haruharuharukichi.github.io/so-thin/academy/002/</link>
      <pubDate>Sun, 10 Mar 2019 15:26:42 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/academy/002/</guid>
      <description>マインドマップの使い方とテーマの作成方法 今回の目的  マインドマップでサイトマップを作れるようになる WordPressテーマの作り方（流れ）を理解できる・作れる  マイントマップ サイトマップは原則マインドマップで作成する
理由はユーザーフローが分かり易いから
マインドマップとは、地図みたいなもの
使い方  http://jp.xmind.net/download/ からソフトをDL https://haruharuharukichi.github.io/so-thin/images/sitemap.xmind でテンプレをDL テンプレファイルを開いていじる  大体の要素は右クリックかダブルクリックで変更できる
サブ 【セクション1 ex.】みたいなのを追加する場合は、一番大きい中心トピックを右クリックし、挿入→サブトピック
ラベル 「目的：」の部分は親要素の右クリックから挿入→ラベル
矢印 要素を繋げる矢印を書く場合は、右クリック→挿入→関連
文字を入れる時はダブルクリック
以上。
本当に簡単なので、各自いじってみよう
テーマ作成 HTMLからWordPressテーマに落とし込む方法
構造 公式解説
HTML作成 なにはともあれ、HTMLが無いとお話しにならないので作りましょう。
トップページ まずデザインのベースになるトップページをつくります
この時のフォルダ構造(lib以下は任意)
root
|-index.html
|-style.css
|-lib
|-images
|-css
|-js
固定ページ 次に、トップページのデザインに合わせて固定ページデザインを１つ以上つくります
規模が大きい時は予め幾つか用意したりする
固定ページのテンプレートを増やしても基本めんどくささしかないので、たいていの場合大枠用テンプレート一つ+中身はページごとに変える
ガワは同じで中身だけ変えるイメージ
この時のフォルダ構造(lib以下は(ry
root
|-index.html
|-page.html
|-style.css
|-lib
|-images
|-css
|-js
投稿ページ ブログ機能を付ける場合でもつけない場合でも、とりあえず投稿ページ用デザインも作っておく
中身は適当だけど、見出し５くらいまではデザインを作っておいて どうせその内ブログ機能も付けたいとか言い出すから。
この時のフォルダ構造(ry
root
|-index.html
|-page.html
|-post.html
|-style.css</description>
    </item>
    
    <item>
      <title>iota.css &amp; naming</title>
      <link>https://haruharuharukichi.github.io/so-thin/academy/001/</link>
      <pubDate>Sat, 09 Mar 2019 13:38:00 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/academy/001/</guid>
      <description>iota.cssの使い方と命名規則 今回の目的  レスポンシブと正しいマークアップの重要性の理解 iota.cssを使いこなせる 命名規則に従ったコーディングが出来る  CSS Grid CSS Gridとは レスポンシブデザインを実現するためのCSSの新しい機能
CSSのみでレスポンシブデザインを完全に実現できるのが特徴
変遷 Webデザインの主流は以下のように変化してきている
 tableレイアウト  HTMLだけでコーディングするうえ、tableタブが主流  CSS登場  HTMLとCSSの分業化  Flash活躍  アニメーションを求めてFlashが活躍  HTML5登場  HTMLの要素（headerやsection等）が増えて正しいマークアップが意識されるように  CSS進化  Flexboxなど、レイアウト用のプロパティが充実  Bootstrap流行  今でも現役の、みんな大好きブーツストラップが流行。レスポンシブの重要性が説かれるように  CSS Grid爆誕　←　イマココ  可読性と機能性を両立させたコーディングが大事に  リッチスニペット（今後来る）  マークアップ+構造化   正しいマークアップの重要性 Webサイトは分業化をテーマに進化してきている。
正しいマークアップとは正しい役割分担といえる
テーマは「可読性」これに尽きる 正しいマークアップが何故重要なのかというと、「読みやすいサイト」が求められているから
正しいマークアップが必要なのはSEO対策で効果的だからと言うサイトも多いが、これは本質ではない
SEO対策で正しいマークアップが評価されるのは、Googleがユーザー第一主義を取っているからであり、とどのつまり「ユーザーが求めている情報を簡単に手に入れらえるサイトが一番」ということ
そのために、要素の細分化等を行いユーザーが求めている情報があることをGoogleに知らせることが重要になり、結果として正しいマークアップが求められるようになった つまり、「探しやすく見やすいサイト」のためのマークアップ
正しいマークアップには副次的なメリットもある。
それがメンテナンスの効率化
要素をシンプルなモジュールにすることで、要素単位での改善が可能になる
それによりプログラマ側の可読性も向上し、コーディングとメンテナンスが楽になる
CSS GridはBootstrapなどよりも遥かに少ないコードで簡単に分かり易く実装できるため、可読性が向上する
つまり、CSS Gridは時代に愛され、求められた機能</description>
    </item>
    
    <item>
      <title>SmartLine</title>
      <link>https://haruharuharukichi.github.io/so-thin/templates/smartline/</link>
      <pubDate>Sun, 03 Mar 2019 13:22:02 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/templates/smartline/</guid>
      <description>HOME ABOUT SERVICE NEWS CONTACT            LUNAIM MARRIAGE AGENCY
   about who we are
and
what we want
 出逢いの力は偉大です
人と人が出逢う時、そこには大きな力が生まれます
一人では乗り越えられない困難も、パートナーがいれば乗り越えられます
相手を知ることで、自分自身も深めることが出来る
出逢いには、不思議な力があります
私たちは豊かな出逢いと、それにより実現される未来を追い求めます
our philosophy    feature we think that
social contribution is important
 会社の持つ最大の特徴は、持続可能性です
持続することで基盤を築き、それが未来への礎となります
そして、持続可能性には会社を取り巻く環境、つまり社会に対する奉仕が欠かせません
”社会貢献で未来を創る”
これがLunaimのビジョンです
   SERVICE our business to
achieve the vision
  FEDERATION 九州を拠点とした結婚相談所連盟”九結会”の運営</description>
    </item>
    
    <item>
      <title>GrayGrid</title>
      <link>https://haruharuharukichi.github.io/so-thin/templates/graygrid/</link>
      <pubDate>Sun, 03 Mar 2019 13:21:53 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/templates/graygrid/</guid>
      <description>salon
OF
hair
HAIR
a.o  pleasure
FOR
you
 scroll          About staff menu News reserve   news of a.o Hello world! 2012/10/2
 Another Post with Everything In It 2008/09/17
 An Ordered List Post 2008/09/17
  VIEW ALL    talk with
each of you 私たちは、お客様一人一人と向き合う美容室であることを誇りとしています。
それぞれのストーリーをもってご来店下さる皆様に、喜んでいただける楽園をつくります。
MORE    FEATURE
OF salon a.oは横浜にある完全予約制のヘアサロンです。</description>
    </item>
    
    <item>
      <title>Hakotate</title>
      <link>https://haruharuharukichi.github.io/so-thin/templates/hakotate/</link>
      <pubDate>Sun, 03 Mar 2019 13:21:39 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/templates/hakotate/</guid>
      <description>home About works info blog Contact     HAKO
×
TATE  DESIGN FOR WEB SITE
 about I am Pioneer.
more
   access 〒220-0012 神奈川県横浜市西区
最寄駅から徒歩1分
  business hours 10:00~11:00
  holiday 毎週土・日曜日
  detail ポップでロックなWEBデザイン
more
  we want revolution  feature of us  distance あなたと親身に向き合います
  service 喜びを作ることが仕事です
  diligence 日々の努力を怠りません</description>
    </item>
    
    <item>
      <title>PureSlide</title>
      <link>https://haruharuharukichi.github.io/so-thin/templates/pureslide/</link>
      <pubDate>Sun, 03 Mar 2019 12:43:20 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/templates/pureslide/</guid>
      <description>九結会について 加盟団体 お見合いシステム お知らせ 加盟案内             Previous   Next   九州で探そう
九州で出逢おう
九州の為の結婚相談所連盟
九結会   HOME/ABOUT
 著者：九結会 作成日：2018/08/20 更新日：2018/08/20      ABOUT 九州を結ぶ会、九結会
     九州のみで完結する相談所連盟 テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト
MORE      会員検索システム「Member&amp;rsquo;s」とは テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト
MORE      お見合いのルールとマナー テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</description>
    </item>
    
    <item>
      <title>Salary</title>
      <link>https://haruharuharukichi.github.io/so-thin/salary/</link>
      <pubDate>Sat, 02 Mar 2019 14:48:19 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/salary/</guid>
      <description>給与 賃金 賃金表     Training Training Training Normal Normal Normal Master Master Master Boss     等級 基礎給 頁給単価 機能給単価 基礎給 頁給単価 機能給単価 基礎給 頁給単価 テーマ提供給 全て   0 12000 1500 4000 15000 2000 5000 40% 0% 20.0% 応相談（パートナーとして扱う）   1 12000 1500 4000 15250 2025 5250 41% 0% 20.5%    2 12000 1500 4000 15500 2050 5500 42% 0% 21.</description>
    </item>
    
    <item>
      <title>Todo</title>
      <link>https://haruharuharukichi.github.io/so-thin/todo/</link>
      <pubDate>Fri, 01 Mar 2019 18:01:41 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/todo/</guid>
      <description>やりたいことリスト マーケティングコンサル（サイトのプラットフォーム化） 単発で終わるフロービジネスでなく、積み重ねられるストックビジネスをやりたい
制作自体は安く請けて、その後の運用で毎月金を貰うようなモデル。
運用内容は以下の通り
APIでサイト管理 Core Reporting APIとSearch Console API使って顧客のアナリティクスとサーチコンソールのデータを取り出して、コンサルしたい
UI最適化 上記と同じく、サイト内部でのユーザーの動きと感情をコンサル
トータルコーディネート SEOだけじゃなくて外部からの流入・内部での動線・外部への流出をトータルでコーディネートして、顧客にとって最適なシステムを作りたい（ネットワーク化に対応したい）
コンテンツマネジメント コンテンツマーケが主流の現在に対応出来る様、顧客のコンテンツの質を高めたい
制作自動化 AIとか使ってサイト制作をもっと簡単にしたい
コンポーネント最適化 サイトに埋め込むコンポーネントをもっとイケてる感じにしたい
schema.org導入 リッチスニペットに完全対応したい
資金繰り 助成金・補助金とかでもいいから資金が欲しい</description>
    </item>
    
    <item>
      <title>Material</title>
      <link>https://haruharuharukichi.github.io/so-thin/material/</link>
      <pubDate>Sun, 24 Feb 2019 16:10:45 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/material/</guid>
      <description>素材の集め方・おすすめサイト 色 お薦めサイト  ColorPick Eyedropper  困ったらまずコレ。気に入ったサイトで起動すれば、色コードを簡単に取得できる。TTP（徹底的にパクる）する際に便利  パレットン  色相を考えて合う色を計算してくれる優れもの。暗明のバリエーションもあるので、ぶっちゃけ全部これ使えばいいんじゃね？  palettable  色をどんどん提案してくれるので、サブ配色を決める際に便利  COLOR TOOL  マテリアルデザインの定義に従った配色を提案してくれる  カラーコード変換ツール  何かと便利な変換ツール。   お薦め色の決め方  ColorPick Eyedropperを使って参考にしたサイトのメインカラーをコピー イメージに合うように、パレットンで色をちょっとずらす メインカラーをものすごく明るくしたのと、ものすごく暗くしたのをそれぞれベースカラー、フォントカラーとして採用 イメージに合い、メインカラーと喧嘩しないサブカラーとアクセントカラーをパレットンで探す（角度と明暗を調整しつつ探す） 実装してみて合わなければ修正  実装には、以下のようにstyle.cssのトップにCSS変数を宣言し、使用か所ではそれを呼び出すと良い。
:root{ --base-color:rgb(247,247,247);/*#f7f7f7*/ --base-transparent:rgba(247,247,247,.4); --font-color:rgb(35, 31, 32);/*#231f20*/ --main-color:rgb(0, 140, 9);/*#008C09*/ --accent-color:rgb(226, 174, 5);/*#E2AE05*/ } /*使用か所*/ .main_title{ color:var(--base-color); background-color:var(--main-color); }  ※CSS変数は動かないブラウザもあるので、GitHub Pagesへの実装の際は全て通常の色指定に戻す事
/*GitHub Pagesアップの際はこれはダメ*/ .main_title{ color:var(--base-color); background-color:var(--main-color); border:1px solid var(--base-transparent); } /*これに治す*/ .main_title{ color:#f7f7f7; background-color:#008C09; border:1px solid rgba(247,247,247,.</description>
    </item>
    
    <item>
      <title>Table</title>
      <link>https://haruharuharukichi.github.io/so-thin/components/table/</link>
      <pubDate>Sun, 17 Feb 2019 18:47:18 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/components/table/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>https://haruharuharukichi.github.io/so-thin/components/navigation/</link>
      <pubDate>Sun, 17 Feb 2019 18:47:06 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/components/navigation/</guid>
      <description>Navigation PHPベーシックコード + header.php
&amp;lt;nav role=&amp;quot;navigation&amp;quot; id=&amp;quot;navbar&amp;quot; class=&amp;quot;grid container navbar_wrapper&amp;quot;&amp;gt; &amp;lt;?php if ( function_exists( &#39;the_custom_logo&#39; ) ) { $custom_logo_id = get_theme_mod( &#39;custom_logo&#39; ); $custom_logo_url = wp_get_attachment_image_url( $custom_logo_id , &#39;full&#39; ); echo &#39;&amp;lt;a class=&amp;quot;flex navbar_brand&amp;quot; href=&amp;quot;&#39; . esc_url( home_url() ) . &#39;&amp;quot; rel=&amp;quot;home&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;navbar_logo&amp;quot; style=&amp;quot;background-image:url(&#39; . esc_url( $custom_logo_url ) . &#39;);&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&#39;; } ?&amp;gt; &amp;lt;button class=&amp;quot;navbar_toggler&amp;quot; id=&amp;quot;navbarToggler&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt; &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/button&amp;gt; &amp;lt;?php wp_nav_menu( array( &#39;theme_location&#39;=&amp;gt;&#39;Navigation&#39;, &#39;menu_class&#39; =&amp;gt;&#39;navbar_list&#39;, &#39;container&#39; =&amp;gt;false, &#39;items_wrap&#39; =&amp;gt;&#39;&amp;lt;ul class=&amp;quot;%2$s&amp;quot;&amp;gt;%3$s&amp;lt;/ul&amp;gt;&#39;)); ?</description>
    </item>
    
    <item>
      <title>Link</title>
      <link>https://haruharuharukichi.github.io/so-thin/components/link/</link>
      <pubDate>Sun, 17 Feb 2019 18:47:00 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/components/link/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Header</title>
      <link>https://haruharuharukichi.github.io/so-thin/components/header/</link>
      <pubDate>Sun, 17 Feb 2019 18:46:52 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/components/header/</guid>
      <description>Header PHPベーシックコード + header.php
&amp;lt;header role=&amp;quot;banner&amp;quot; class=&amp;quot;flex header_wrapper&amp;quot; style=&amp;quot;background-image:url(&amp;lt;?php header_image(); ?&amp;gt;);&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;header_content&amp;quot;&amp;gt; &amp;lt;h1 class=&amp;quot;header_title&amp;quot;&amp;gt; &amp;lt;?php if(is_home()){ bloginfo( &#39;name&#39; ); ?&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;p class=&amp;quot;header_descripiton&amp;quot;&amp;gt;&amp;lt;?php bloginfo( &#39;description&#39; ); ?&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;?php }else{ if(is_single()){ $category = get_the_category($post-&amp;gt;ID); echo $category[0]-&amp;gt;cat_name; }elseif(is_archive()){ echo &amp;quot;archive&amp;quot;; }elseif (is_search()) { echo &amp;quot;search&amp;quot;; }elseif (is_404()) { echo &amp;quot;not found&amp;quot;; }else{ the_title(); } ?&amp;gt; &amp;lt;/h1&amp;gt; &amp;lt;?php } ?&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/header&amp;gt;   + function.php
//カスタムヘッダー追加 add_theme_support( &#39;custom-header&#39; );</description>
    </item>
    
    <item>
      <title>Grid</title>
      <link>https://haruharuharukichi.github.io/so-thin/components/grid/</link>
      <pubDate>Sun, 17 Feb 2019 18:46:46 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/components/grid/</guid>
      <description>Grid 2分割 See the Pen vbmmbm by haruharuharukichi (@haruharuharukichi) on CodePen.   3分割 See the Pen LqyaBz by haruharuharukichi (@haruharuharukichi) on CodePen.   4分割 See the Pen Grid-4 by haruharuharukichi (@haruharuharukichi) on CodePen.   流動型 See the Pen Grid-List by haruharuharukichi (@haruharuharukichi) on CodePen.</description>
    </item>
    
    <item>
      <title>Form</title>
      <link>https://haruharuharukichi.github.io/so-thin/components/form/</link>
      <pubDate>Sun, 17 Feb 2019 18:46:41 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/components/form/</guid>
      <description>Header PHPベーシックコード + 問い合わせフォーム
&amp;lt;div class=&amp;quot;form_wrapper&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;form_content&amp;quot;&amp;gt; &amp;lt;label class=&amp;quot;flex&amp;quot;&amp;gt; お名前 (必須) &amp;lt;/label&amp;gt; [text* your-name placeholder&amp;quot;例）山田　太郎&amp;quot;] &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;form_content&amp;quot;&amp;gt; &amp;lt;label class=&amp;quot;flex&amp;quot;&amp;gt;メールアドレス (必須)&amp;lt;/label&amp;gt; [email* your-email placeholder&amp;quot;sample@ao.to&amp;quot;] &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;form_content&amp;quot;&amp;gt; &amp;lt;label class=&amp;quot;flex&amp;quot;&amp;gt;題名&amp;lt;/label&amp;gt; [text your-subject placeholder&amp;quot;バナーについて&amp;quot;] &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;quot;message&amp;quot; class=&amp;quot;form_content&amp;quot;&amp;gt; &amp;lt;label class=&amp;quot;flex&amp;quot;&amp;gt;メッセージ本文&amp;lt;/label&amp;gt; [textarea* your-message placeholder&amp;quot;掲載依頼です&amp;quot;] &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;form_btn&amp;quot;&amp;gt; [submit &amp;quot;送信&amp;quot;] &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;    
オーソドックスタイプ See the Pen oVdgeB by haruharuharukichi (@haruharuharukichi) on CodePen.</description>
    </item>
    
    <item>
      <title>Card</title>
      <link>https://haruharuharukichi.github.io/so-thin/components/card/</link>
      <pubDate>Sun, 17 Feb 2019 18:46:34 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/components/card/</guid>
      <description>Card 共通CSS +  ```css position: relative; width: 100%; background-color:var(--base-color); } .main_card.grid{ grid-gap: 0; grid-template-columns: 1fr; grid-template-rows: 40% 60%; align-items: center; } .card_title{ margin: 0; } .card_img{ display:block; width: 100%; object-fit: cover; } .card_icon{ max-width:100%; max-height:100%; padding: 1rem; object-fit:contain; } .card_header{ position:relative; width: 100%; padding: 1rem; background-color: var(--main-color); color: var(--base-color); } .main_card.grid .card_header{ height:100%; } .card_header .card_title{ width: 100%; margin: 0; } .card_body{ position:relative; width: 100%; padding: 1rem; } .card_description{ position:absolute; top:0; left:0; margin:0; } .</description>
    </item>
    
    <item>
      <title>Button</title>
      <link>https://haruharuharukichi.github.io/so-thin/components/button/</link>
      <pubDate>Sun, 17 Feb 2019 18:46:28 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/components/button/</guid>
      <description>Button 共通HTML,CSS + html
rel,_btnの前は任意で変更
&amp;lt;a href=&amp;quot;#&amp;quot; type=&amp;quot;button&amp;quot; rel=&amp;quot;&amp;quot; class=&amp;quot;_btn&amp;quot;&amp;gt;&amp;lt;span&amp;gt;more&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;  css
[class*=&amp;quot;_btn&amp;quot;],[class*=&amp;quot;_btn&amp;quot;]:hover{ display:inline-block; padding:.5rem; margin:.25rem; color: var(--font-color); text-align:center; text-decoration: none; transition:.3s; } [class*=&amp;quot;_btn&amp;quot;]:hover{ }    
オーソドックスタイプ See the Pen Button by haruharuharukichi (@haruharuharukichi) on CodePen.</description>
    </item>
    
    <item>
      <title>Plugin</title>
      <link>https://haruharuharukichi.github.io/so-thin/plugin/</link>
      <pubDate>Sun, 17 Feb 2019 18:33:01 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/plugin/</guid>
      <description>プラグイン 必須プラグイン BackWPUp 一番最初に入れるべきプラグイン
データベースとファイル等のバックアップを作成し、サーバーに自動保存してくれるプラグイン
以下設定方法
https://bazubu.com/how-to-use-backwpup-23804.html
All in one SEO Pack SEO関係は大体これ入れとけば大丈夫なプラグイン
ものすごく多機能でxmlサイトマップも作成してくれる
※現在、meta要素は設定してもあまり意味をなさないものが多い為キーワードやディスクリプションの設定はほどほどに
以下設定方法
 導入と有効化したら、左サイドバーからAll in one SEO Packの一般設定へ ホームページ設定でタイトルとサイトの詳細を設定 タイトル設定は必要に応じて編集（書き換えは有効に） Noindex設定で投稿と固定ページ以外をNOINDEXに、NOFOLLOWも同じ 同じくNoindex設定でカテゴリー以外をnoindex,nofollow 詳細設定から、ディスクリプションを自動生成にチェック 設定を保存 左サイドバーから機能管理に移り、XMLサイトマップと悪意あるボットのブロッカーを有効化しておく  参考URL
https://bazubu.com/all-in-one-seo-pack-23836.html
WP fastest cache キャッシュを使ってサイトを早くしてくれるプラグイン
あると無いとじゃ大違い
※有効化すると、CSSやJSもキャッシュを作成します。有効化後にサイトを編集する場合は、編集完了後にすべてのキャッシュをクリアする必要があります
 設定画面をスクロールし、言語を日本語に設定 モバイルの項目以外全てチェックを入れる preloadは事前にキャッシュを作成する項目なので、Restart After Completed以外大体チェックを入れる。 保存して終了  有効化した後に編集した場合は、上部ナビゲーションの「clear cache」から「Delete Cache and Minified CSS/JS」をクリック
参考URL
https://pasolack.com/wordpress/wp-fastest-cache/#Preload
EWWW Image Optimizer 画像圧縮プラグイン
wp fastestと一緒に使うとだいぶ早くなる（はず）
設定項目はほとんどなし
参考リンク
https://bazubu.com/ewww-image-optimizer-23864.html
SiteGuard WP Plugin セキュリティ対策用プラグイン
これ入れておけばセキュリティは大体OK、有効化するだけでいいという優れもの
ただ、有効化するとログインページのURLが変わってしまうので、納品直前に入れるくらいがちょうどいい。あとログインURLのコピー忘れずに</description>
    </item>
    
    <item>
      <title>Function</title>
      <link>https://haruharuharukichi.github.io/so-thin/function/</link>
      <pubDate>Sun, 17 Feb 2019 18:32:51 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/function/</guid>
      <description>function.php PHPベーシックコード function.phpの基礎的な記述内容です。
先ず以下を張り付けてから、必要に応じてコードを追加していきましょう
&amp;lt;?php /* *削除系・追加系・編集系の3種類 *系列を検索する際はCtrl+Fを押してから「○○系」と入力 */ /******************削除系******************/ //SEO対策 // WordPressバージョン情報の削除 remove_action(&#39;wp_head&#39;, &#39;wp_generator&#39;); // ショートリンクURLの削除 remove_action(&#39;wp_head&#39;, &#39;wp_shortlink_wp_head&#39;); // wlwmanifestの削除 remove_action(&#39;wp_head&#39;, &#39;wlwmanifest_link&#39;); // application/rsd+xmlの削除 remove_action(&#39;wp_head&#39;, &#39;rsd_link&#39;); // RSSフィードのURLの削除 remove_action(&#39;wp_head&#39;, &#39;feed_links_extra&#39;, 3); //自動成形停止 remove_filter( &#39;the_content&#39;, &#39;wpautop&#39; ); function override_mce_options( $init_array ) { $init_array[&#39;indent&#39;] = true; $init_array[&#39;wpautop&#39;] = false; return $init_array; } add_filter( &#39;tiny_mce_before_init&#39;, &#39;override_mce_options&#39; ); //ツールバー非表示 add_filter(&#39;show_admin_bar&#39;, &#39;__return_false&#39;); //Contact Form 7が読み込むCSSを削除 add_action( &#39;wp_enqueue_scripts&#39;, &#39;my_delete_plugin_styles&#39; ); function my_delete_plugin_styles() { wp_deregister_style( &#39;contact-form-7&#39; ); } //メディア挿入時のデフォルトのリンク先を「なし」に設定する function webshufu_default_noimagelink() { $webshufu_default_imagelink = get_option( &#39;image_default_link_type&#39; ); if ($webshufu_default_imagelink !</description>
    </item>
    
    <item>
      <title>Flow</title>
      <link>https://haruharuharukichi.github.io/so-thin/flow/</link>
      <pubDate>Sun, 17 Feb 2019 18:32:32 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/flow/</guid>
      <description>制作の流れ クライアントの目的はWebサイトをつくることでなく、Webサイトによって何かを達成することです
目的を達成できるサイトだけが「良いサイト」です
常に目的（ゴール）を意識して、要求水準+αを達成できるよう考えましょう
※以下テンプレ等に出てくる【】は、中身を最適化してねという意味です。くれぐれも【】を残したままにしないようにしましょう
営業請負会社担当 受注
営業代行会社が案件をとってきます。
クライアント名・大まかなボリューム・金額がこちらに伝えられ制作担当者を決めます。
ヒアリング・画像のシェア 大まかにどのようなサイトを希望しているのかを代行会社がヒアリングし、その内容と画像等がGoogleドライブにシェアされます。
ヒアリング内容は以下の通りです。
 概要 理念、思い 与えたいイメージ（クール、ロック、ポップ、ラグジュアリー等） 強み 何故サイトが欲しいのか 想定している大まかなページ構成 伝えたいメッセージ ライバルサイト 好印象のサイトデザイン（具体例も） ストーリー（何故立ち上げたのかなど）  
自社担当 チャットワーク連絡 管理者がクライアントとチャットを繋ぎます
目的：流れの認知、制作者の保護
チャットワークにクライアントから連絡が来たら、クライアントに自動的に以下の連絡が送られます。
 ご申請いただきありがとうございます。
WEBサイト作成サービスsoThinです。
こちらのチャットワークアカウントでは、制作から納品までを主に担当させていただきます。
制作の流れは以下の通りとなります。
1. 軽いヒアリングと概要の確認をさせていただきます
2. サイトトップページのデザイン案を作成します（フェーズ1）
3. トップページにあわせてサイト全体のデザインを作成します（フェーズ2）
4. サーバーを用意していただき、WordPressをインストールしサイトを構築・納品します（フェーズ3）
各フェーズでは、1回につき１つのデザイン又は成果物を見ていただきます（一度に複数お見せし、その中から選んでいただくという形式はとりません）。
気に入っていただいた時点で次のフェーズに移行しますが、変更を希望する部分がある場合は変更依頼を出すことが出来ます。その場合は、該当フェーズを繰り返しとなります。
各フェーズの作業期間は1回あたり5営業日を目安としてお考え下さい。
誠に勝手ながら、フェーズの変更依頼は各3回まで、お客様からのご質問は計10回までとさせていただき、超過分は追加料金をお支払いいただきます。
以前の事例をもとに担当者の保護を目的につくられた制限ですので、何卒ご理解とご協力を宜しくお願い致します。
より良いサイトを作成出来る様尽力いたしますので、ご協力いただけますと幸いです。
後程制作担当者をこのグループに追加いたしますので、今しばらくお待ちください。
 送信後、管理者が担当者をグループに招待します。
ヒアリング（ここから担当者が行う） 詳細をヒアリングし、ページ概要を確認
目的：サイトイメージの共有、制作に必要な材料の確保、信頼と評価の獲得
事前にGoogleドライブに共有されている内容を参考に概要を把握しておく。
挨拶と同時に、方向性と追加で必要な内容を確認・質問する。
質問の際は、サイト作成の目的や誰がどんな目的で閲覧するのかを明らかにするように。
依頼者と製作者が考えている、「良いサイト」のイメージを統一出来るのが良い質問です。
質問ばかりだと嫌がるクライアントもいる為、なるべく提案や確認を混ぜて歩み寄る姿勢を見せましょう
以下テンプレート
【】を入れ替え、質問数は必要に応じて変化させて使用
 この度WEBサイトの制作を担当させていただくこととなりました、【名前】です。
よろしくお願いします！
早速作成に移りたいのですが、その前にいくつか軽いヒアリングをさせていただきたいと考えております。
【相手の名前】様の考えをより深く知ることで、見る人の心に残るWEBサイトを作りたいからです。
お手数おかけしますが、ご協力お願いします！
お聞きしたい項目は以下の通りです。</description>
    </item>
    
    <item>
      <title>Naming</title>
      <link>https://haruharuharukichi.github.io/so-thin/naming/</link>
      <pubDate>Sun, 17 Feb 2019 17:23:51 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/naming/</guid>
      <description>BEMカスタム命名規則 超具体的な使用例 &amp;lt;nav class=&amp;quot;navbar_wrapper&amp;quot;&amp;gt; &amp;lt;ul class=&amp;quot;navbar_list&amp;quot;&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot; class=&amp;quot;navbar_link&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot; class=&amp;quot;navbar_link&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot; class=&amp;quot;navbar_link&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;header class=&amp;quot;header_wrapper&amp;quot;&amp;gt; &amp;lt;h1 class=&amp;quot;header_title&amp;quot;&amp;gt;title&amp;lt;/h1&amp;gt; &amp;lt;p class=&amp;quot;header_description&amp;quot;&amp;gt;description&amp;lt;/p&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;main class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;section class=&amp;quot;main_wrapper&amp;quot;&amp;gt; &amp;lt;h2 class=&amp;quot;main_title&amp;quot;&amp;gt;main title&amp;lt;/h2&amp;gt; &amp;lt;p class=&amp;quot;main_description&amp;quot;&amp;gt;main information&amp;lt;/p&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;section class=&amp;quot;main_wrapper&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;main_bgr&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;h2 class=&amp;quot;main_title&amp;quot;&amp;gt;main title&amp;lt;/h2&amp;gt; &amp;lt;p class=&amp;quot;main_description&amp;quot;&amp;gt;main information&amp;lt;/p&amp;gt; &amp;lt;ul class=&amp;quot;main_content list&amp;quot;&amp;gt; &amp;lt;li class=&amp;quot;main_item&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;main_card&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;card_header&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;card_title&amp;quot;&amp;gt;card title&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;card_description&amp;quot;&amp;gt;card information&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;card_body&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;card_text&amp;quot;&amp;gt;card text&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;main_item&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;main_card&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;card_header&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;card_title&amp;quot;&amp;gt;card title&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;card_description&amp;quot;&amp;gt;card information&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;card_body&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;card_text&amp;quot;&amp;gt;card text&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;main_item&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;main_card&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;card_header&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;card_title&amp;quot;&amp;gt;card title&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;card_description&amp;quot;&amp;gt;card information&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;card_body&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;card_text&amp;quot;&amp;gt;card text&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;aside class=&amp;quot;sidebar_wrapper&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;sidebar_widget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/aside&amp;gt; &amp;lt;footer class=&amp;quot;footer_wrapper&amp;quot;&amp;gt; &amp;lt;p class=&amp;quot;footer_text&amp;quot;&amp;gt;copyright 2019~ so-thin&amp;lt;/p&amp;gt; &amp;lt;/footer&amp;gt;  クラス名 メインクラス  Blockはセクション名+_wrapper(Block単体ではなく、Block_elementのように扱う) Blockは量産せず、なるべく少ないブロック数でコーディングする Block名はHTML5のタグ名をベースにした物を使う BlockとElementはスネークケースで繋ぐ Modifierは単語 Modifier単体では使わない Block名等が2単語以上からなる場合はキャメルケースで繋ぐ 組み合わせが限定される場合はセレクターでの指定を許可する(ul→li,.</description>
    </item>
    
  </channel>
</rss>