<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academy on so thin</title>
    <link>https://haruharuharukichi.github.io/so-thin/academy/</link>
    <description>Recent content in Academy on so thin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sat, 09 Mar 2019 13:37:20 +0900</lastBuildDate>
    
	<atom:link href="https://haruharuharukichi.github.io/so-thin/academy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub pagesとデザイン</title>
      <link>https://haruharuharukichi.github.io/so-thin/academy/003/</link>
      <pubDate>Mon, 25 Mar 2019 22:58:35 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/academy/003/</guid>
      <description>GitHub pagesとデザイン github pages repo作成  https://github.com/soThin にログイン
 New repositoryをクリック
 名前はクライアント名（例：SawSoThin）
 README追加にチェックを入れて作成
 Upload filesから必要ファイルをアップ コミットして完了まで放置  GitHub pagesでは画像拡張子の大文字小文字が区別されるので注意（jpgとJPGは別物扱い）
page作成  Settingクリック GitHub pagesでmaster blanch選択 URLにアクセスして確認、終了  イケてるデザインのつくりかた イケてるデザインとは 見易さとインパクトが両立されているデザイン
ユーザーをコンバージョンに導く動線が出来ていて、かつそれを辿りたいと思わせるデザイン
何故必要なのか カッコいいだけじゃ自己満足
見易いだけだと記憶に残らない
両立して、コンバージョンを達成しつつまた来たいと思わせないと意味がない
もっと知りたい&amp;amp;もっと見たいという欲求を掻き立て、満たすためには必要不可欠
言い換えれば、普通じゃダメだから
ただサイトを作ることに意味はない
ユーザーとクライアント、双方の要求を満たすだけでなくそれ以上を提供しなければ次は無い
他人にお勧めしたいレベルにならないといけない
次につなげるには、普通じゃない、イケてるデザイン（+αの提供）が必要不可欠
作り方 TTP（てってい　てきに　パクる）
最初はイケてるサイトを幾つかピックアップし、まるパクリする
上手い人は例外なく目が肥えているので、まず良い物を見分ける目を身に着ける
日常目にする広告を含め、あらゆるものに目を向けてその美しさと要因を分析すべし
基本要素は
 最短でCVに導く合理的な動線 全体としての統一感 個別の要素の最適化（見易さ・カッコよさ） 多少の外し 無駄な要素の削除（一番大事）  の順で作る。
デザインは引き算の学問なので、余白を上手に使える様になったら一流
常に、「この要素とデザインは必要か？」を考えると良い
コツ 「どこからでも3クリックまでで全てのページに行ける」これを意識すると良い
デザインに関しては、大枠から決めてゆく
お薦めは大枠→中身→大枠→中身&amp;hellip;と繰り返す事。繰り返せば繰り返す程、精度は上がって行く
 CVは何か（サイトで何がしたいのか） 誰に向けた物なのか サイトマップ・動線設計 どんな見せ方をするか（クール、ロック、ポップ等） 何を伝えるか（キー・核は何か）http://decom.</description>
    </item>
    
    <item>
      <title>マインドマップ &amp; html→WordPress</title>
      <link>https://haruharuharukichi.github.io/so-thin/academy/002/</link>
      <pubDate>Sun, 10 Mar 2019 15:26:42 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/academy/002/</guid>
      <description>マインドマップの使い方とテーマの作成方法 今回の目的  マインドマップでサイトマップを作れるようになる WordPressテーマの作り方（流れ）を理解できる・作れる  マイントマップ サイトマップは原則マインドマップで作成する
理由はユーザーフローが分かり易いから
マインドマップとは、地図みたいなもの
使い方  http://jp.xmind.net/download/ からソフトをDL https://haruharuharukichi.github.io/so-thin/images/sitemap.xmind でテンプレをDL テンプレファイルを開いていじる  大体の要素は右クリックかダブルクリックで変更できる
サブ 【セクション1 ex.】みたいなのを追加する場合は、一番大きい中心トピックを右クリックし、挿入→サブトピック
ラベル 「目的：」の部分は親要素の右クリックから挿入→ラベル
矢印 要素を繋げる矢印を書く場合は、右クリック→挿入→関連
文字を入れる時はダブルクリック
以上。
本当に簡単なので、各自いじってみよう
テーマ作成 HTMLからWordPressテーマに落とし込む方法
構造 公式解説
HTML作成 なにはともあれ、HTMLが無いとお話しにならないので作りましょう。
トップページ まずデザインのベースになるトップページをつくります
この時のフォルダ構造(lib以下は任意)
root
|-index.html
|-style.css
|-lib
|-images
|-css
|-js
固定ページ 次に、トップページのデザインに合わせて固定ページデザインを１つ以上つくります
規模が大きい時は予め幾つか用意したりする
固定ページのテンプレートを増やしても基本めんどくささしかないので、たいていの場合大枠用テンプレート一つ+中身はページごとに変える
ガワは同じで中身だけ変えるイメージ
この時のフォルダ構造(lib以下は(ry
root
|-index.html
|-page.html
|-style.css
|-lib
|-images
|-css
|-js
投稿ページ ブログ機能を付ける場合でもつけない場合でも、とりあえず投稿ページ用デザインも作っておく
中身は適当だけど、見出し５くらいまではデザインを作っておいて どうせその内ブログ機能も付けたいとか言い出すから。
この時のフォルダ構造(ry
root
|-index.html
|-page.html
|-post.html
|-style.css</description>
    </item>
    
    <item>
      <title>iota.css &amp; naming</title>
      <link>https://haruharuharukichi.github.io/so-thin/academy/001/</link>
      <pubDate>Sat, 09 Mar 2019 13:38:00 +0900</pubDate>
      
      <guid>https://haruharuharukichi.github.io/so-thin/academy/001/</guid>
      <description>iota.cssの使い方と命名規則 今回の目的  レスポンシブと正しいマークアップの重要性の理解 iota.cssを使いこなせる 命名規則に従ったコーディングが出来る  CSS Grid CSS Gridとは レスポンシブデザインを実現するためのCSSの新しい機能
CSSのみでレスポンシブデザインを完全に実現できるのが特徴
変遷 Webデザインの主流は以下のように変化してきている
 tableレイアウト  HTMLだけでコーディングするうえ、tableタブが主流  CSS登場  HTMLとCSSの分業化  Flash活躍  アニメーションを求めてFlashが活躍  HTML5登場  HTMLの要素（headerやsection等）が増えて正しいマークアップが意識されるように  CSS進化  Flexboxなど、レイアウト用のプロパティが充実  Bootstrap流行  今でも現役の、みんな大好きブーツストラップが流行。レスポンシブの重要性が説かれるように  CSS Grid爆誕　←　イマココ  可読性と機能性を両立させたコーディングが大事に  リッチスニペット（今後来る）  マークアップ+構造化   正しいマークアップの重要性 Webサイトは分業化をテーマに進化してきている。
正しいマークアップとは正しい役割分担といえる
テーマは「可読性」これに尽きる 正しいマークアップが何故重要なのかというと、「読みやすいサイト」が求められているから
正しいマークアップが必要なのはSEO対策で効果的だからと言うサイトも多いが、これは本質ではない
SEO対策で正しいマークアップが評価されるのは、Googleがユーザー第一主義を取っているからであり、とどのつまり「ユーザーが求めている情報を簡単に手に入れらえるサイトが一番」ということ
そのために、要素の細分化等を行いユーザーが求めている情報があることをGoogleに知らせることが重要になり、結果として正しいマークアップが求められるようになった つまり、「探しやすく見やすいサイト」のためのマークアップ
正しいマークアップには副次的なメリットもある。
それがメンテナンスの効率化
要素をシンプルなモジュールにすることで、要素単位での改善が可能になる
それによりプログラマ側の可読性も向上し、コーディングとメンテナンスが楽になる
CSS GridはBootstrapなどよりも遥かに少ないコードで簡単に分かり易く実装できるため、可読性が向上する
つまり、CSS Gridは時代に愛され、求められた機能</description>
    </item>
    
  </channel>
</rss>